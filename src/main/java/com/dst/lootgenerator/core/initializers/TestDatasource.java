package com.dst.lootgenerator.core.initializers;

import com.dst.lootgenerator.hero.models.entities.Equipment;
import com.dst.lootgenerator.hero.models.entities.Hero;
import com.dst.lootgenerator.items.models.entities.*;
import com.dst.lootgenerator.items.models.enums.*;
import lombok.Getter;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Random;

@Getter
public class TestDatasource {
    private static TestDatasource instance = null;

    private final List<Attribute> attributes = new ArrayList<>();
    private final List<Item> items = new ArrayList<>();
    private final List<Hero> heroes = new ArrayList<>();
    private final List<Equipment> equipments = new ArrayList<>();

    private TestDatasource() {
        loadAttributes();
        loadItems();
        loadEquipments();
        loadHeroes();
    }



    private void loadAttributes() {
        attributes.add(Attribute.builder().name("AttackPower").description("Increases attack damage").valueType(ValueType.DECIMAL).value(15.5f).build());
        attributes.add(Attribute.builder().name("Defense").description("Reduces incoming damage").valueType(ValueType.DECIMAL).value(20.0f).build());
        attributes.add(Attribute.builder().name("CriticalChance").description("Chance to deal double damage").valueType(ValueType.PERCENT).value(5.0f).build());
        attributes.add(Attribute.builder().name("LifeSteal").description("Steals a percentage of dealt damage as health").valueType(ValueType.PERCENT).value(8.0f).build());
        attributes.add(Attribute.builder().name("ManaRegeneration").description("Restores mana per second").valueType(ValueType.FLOATING).value(3.2f).build());
        attributes.add(Attribute.builder().name("HealthBonus").description("Increases max health").valueType(ValueType.DECIMAL).value(50.0f).build());
        attributes.add(Attribute.builder().name("Stamina").description("Increases endurance for longer fights").valueType(ValueType.DECIMAL).value(30.0f).build());
        attributes.add(Attribute.builder().name("Speed").description("Affects movement speed").valueType(ValueType.FLOATING).value(1.15f).build());
        attributes.add(Attribute.builder().name("Evasion").description("Chance to completely avoid an attack").valueType(ValueType.PERCENT).value(12.0f).build());
        attributes.add(Attribute.builder().name("FireResistance").description("Reduces fire damage taken").valueType(ValueType.PERCENT).value(18.0f).build());
        attributes.add(Attribute.builder().name("IceResistance").description("Reduces ice damage taken").valueType(ValueType.PERCENT).value(22.0f).build());
        attributes.add(Attribute.builder().name("PoisonResistance").description("Reduces poison effects duration").valueType(ValueType.PERCENT).value(10.0f).build());
        attributes.add(Attribute.builder().name("BlockChance").description("Chance to block an attack").valueType(ValueType.PERCENT).value(25.0f).build());
        attributes.add(Attribute.builder().name("MagicDamage").description("Increases magic attack power").valueType(ValueType.DECIMAL).value(40.5f).build());
        attributes.add(Attribute.builder().name("PhysicalDamage").description("Increases physical attack power").valueType(ValueType.DECIMAL).value(35.0f).build());
        attributes.add(Attribute.builder().name("Durability").description("Determines how long an item lasts").valueType(ValueType.DECIMAL).value(100.0f).build());
        attributes.add(Attribute.builder().name("Luck").description("Increases chance of finding rare items").valueType(ValueType.PERCENT).value(7.0f).build());
        attributes.add(Attribute.builder().name("Mana").description("Increases maximum mana points").valueType(ValueType.DECIMAL).value(60.0f).build());
        attributes.add(Attribute.builder().name("SpellPower").description("Boosts the effectiveness of spells").valueType(ValueType.DECIMAL).value(25.0f).build());
        attributes.add(Attribute.builder().name("AttackSpeed").description("Increases the rate of attacks").valueType(ValueType.FLOATING).value(1.3f).build());
        attributes.add(Attribute.builder().name("HolyResistance").description("Reduces holy damage taken").valueType(ValueType.PERCENT).value(15.0f).build());
        attributes.add(Attribute.builder().name("DarknessResistance").description("Reduces dark magic damage taken").valueType(ValueType.PERCENT).value(20.0f).build());
        attributes.add(Attribute.builder().name("WeaponSkill").description("Improves proficiency with weapons").valueType(ValueType.FLOATING).value(2.1f).build());
        attributes.add(Attribute.builder().name("ShieldBlock").description("Boosts shield effectiveness").valueType(ValueType.DECIMAL).value(18.0f).build());
        attributes.add(Attribute.builder().name("LifeRegeneration").description("Regenerates health over time").valueType(ValueType.FLOATING).value(4.5f).build());
        attributes.add(Attribute.builder().name("ArmorPenetration").description("Ignores a portion of enemy armor").valueType(ValueType.PERCENT).value(13.0f).build());
        attributes.add(Attribute.builder().name("WaterAffinity").description("Improves effectiveness of water-based abilities").valueType(ValueType.DECIMAL).value(5.5f).build());
        attributes.add(Attribute.builder().name("EarthResistance").description("Reduces earth damage taken").valueType(ValueType.PERCENT).value(14.0f).build());
        attributes.add(Attribute.builder().name("HealingReceived").description("Boosts the amount of healing received").valueType(ValueType.PERCENT).value(9.0f).build());
        attributes.add(Attribute.builder().name("ShadowAffinity").description("Improves dark magic effectiveness").valueType(ValueType.DECIMAL).value(17.0f).build());
        attributes.add(Attribute.builder().name("WindSpeed").description("Boosts agility when moving").valueType(ValueType.FLOATING).value(1.7f).build());
        attributes.add(Attribute.builder().name("TrapDetection").description("Increases chance of detecting traps").valueType(ValueType.PERCENT).value(11.0f).build());
        attributes.add(Attribute.builder().name("WeaponDurability").description("Increases weapon lifespan").valueType(ValueType.DECIMAL).value(80.0f).build());
        attributes.add(Attribute.builder().name("Focus").description("Improves spellcasting concentration").valueType(ValueType.FLOATING).value(2.3f).build());
        attributes.add(Attribute.builder().name("Stealth").description("Reduces the chance of being detected").valueType(ValueType.PERCENT).value(16.0f).build());
        attributes.add(Attribute.builder().name("Agility").description("Boosts dodging and movement speed").valueType(ValueType.DECIMAL).value(28.0f).build());
        attributes.add(Attribute.builder().name("Endurance").description("Increases stamina regeneration").valueType(ValueType.FLOATING).value(3.8f).build());
        attributes.add(Attribute.builder().name("FireAffinity").description("Improves fire-based abilities").valueType(ValueType.DECIMAL).value(6.7f).build());
        attributes.add(Attribute.builder().name("ArcaneMastery").description("Increases effectiveness of arcane spells").valueType(ValueType.DECIMAL).value(10.5f).build());
        attributes.add(Attribute.builder().name("ShadowStep").description("Enhances stealth movement speed").valueType(ValueType.FLOATING).value(1.4f).build());
        attributes.add(Attribute.builder().name("ReinforcedArmor").description("Provides additional armor").valueType(ValueType.DECIMAL).value(25.0f).build());
        attributes.add(Attribute.builder().name("ElementalSurge").description("Boosts elemental attack power").valueType(ValueType.DECIMAL).value(15.3f).build());
        attributes.add(Attribute.builder().name("NatureBond").description("Increases healing from nature spells").valueType(ValueType.PERCENT).value(12.0f).build());
        attributes.add(Attribute.builder().name("RunicPower").description("Enhances damage of runic abilities").valueType(ValueType.DECIMAL).value(20.8f).build());
        attributes.add(Attribute.builder().name("IronWill").description("Increases resistance to mind control effects").valueType(ValueType.PERCENT).value(9.5f).build());
        attributes.add(Attribute.builder().name("GaleForce").description("Improves wind-based attacks").valueType(ValueType.FLOATING).value(1.9f).build());
        attributes.add(Attribute.builder().name("StoneSkin").description("Reduces physical damage taken").valueType(ValueType.PERCENT).value(14.5f).build());
        attributes.add(Attribute.builder().name("BattleInstinct").description("Improves reaction time in combat").valueType(ValueType.DECIMAL).value(7.5f).build());
        attributes.add(Attribute.builder().name("TitanGrip").description("Enhances grip strength for heavy weapons").valueType(ValueType.DECIMAL).value(22.0f).build());
        attributes.add(Attribute.builder().name("Frostborn").description("Reduces damage taken from ice magic").valueType(ValueType.PERCENT).value(17.0f).build());
        attributes.add(Attribute.builder().name("VenomAffinity").description("Increases effectiveness of poison-based attacks").valueType(ValueType.DECIMAL).value(11.2f).build());
        attributes.add(Attribute.builder().name("Warden'sWatch").description("Boosts defensive capabilities").valueType(ValueType.DECIMAL).value(19.0f).build());
        attributes.add(Attribute.builder().name("MoonlightGrace").description("Enhances magic abilities at night").valueType(ValueType.PERCENT).value(10.0f).build());
        attributes.add(Attribute.builder().name("WarCry").description("Temporarily boosts attack power").valueType(ValueType.FLOATING).value(3.2f).build());
        attributes.add(Attribute.builder().name("AbyssalShield").description("Reduces damage taken from dark magic").valueType(ValueType.PERCENT).value(16.0f).build());
        attributes.add(Attribute.builder().name("EchoingStrike").description("Chance to repeat an attack").valueType(ValueType.PERCENT).value(8.0f).build());
        attributes.add(Attribute.builder().name("CelestialBlessing").description("Boosts holy magic effectiveness").valueType(ValueType.DECIMAL).value(13.7f).build());
        attributes.add(Attribute.builder().name("LunarResilience").description("Reduces damage taken during night battles").valueType(ValueType.PERCENT).value(9.0f).build());
        attributes.add(Attribute.builder().name("Stormborn").description("Increases effectiveness of lightning spells").valueType(ValueType.FLOATING).value(2.6f).build());
        attributes.add(Attribute.builder().name("BlazingSpirit").description("Boosts fire-based attack speed").valueType(ValueType.DECIMAL).value(14.2f).build());
        attributes.add(Attribute.builder().name("DruidicTouch").description("Improves nature magic healing abilities").valueType(ValueType.DECIMAL).value(18.0f).build());
        attributes.add(Attribute.builder().name("DemonicFury").description("Temporarily boosts damage when injured").valueType(ValueType.PERCENT).value(11.5f).build());
        attributes.add(Attribute.builder().name("EtheralAgility").description("Enhances movement in magical environments").valueType(ValueType.FLOATING).value(1.8f).build());
        attributes.add(Attribute.builder().name("PhantomStrikes").description("Increases chance for a ghostly double attack").valueType(ValueType.PERCENT).value(6.7f).build());
        attributes.add(Attribute.builder().name("InfernalMight").description("Enhances strength in heated combat").valueType(ValueType.DECIMAL).value(20.3f).build());
        attributes.add(Attribute.builder().name("Berserker'sRage").description("Boosts attack power when health is low").valueType(ValueType.PERCENT).value(15.8f).build());
        attributes.add(Attribute.builder().name("EldritchWisdom").description("Increases effectiveness of ancient spells").valueType(ValueType.DECIMAL).value(10.2f).build());
        attributes.add(Attribute.builder().name("AstralProjection").description("Improves effectiveness of astral travel spells").valueType(ValueType.FLOATING).value(3.4f).build());
        attributes.add(Attribute.builder().name("BloodPact").description("Enhances damage but drains health over time").valueType(ValueType.PERCENT).value(12.0f).build());
        attributes.add(Attribute.builder().name("Serpent'sGrace").description("Boosts agility and dodging ability").valueType(ValueType.DECIMAL).value(9.3f).build());
        attributes.add(Attribute.builder().name("DragonbornResilience").description("Reduces damage taken from fire").valueType(ValueType.PERCENT).value(18.0f).build());
        attributes.add(Attribute.builder().name("NightmareAura").description("Weakens nearby enemies").valueType(ValueType.DECIMAL).value(7.9f).build());
        attributes.add(Attribute.builder().name("ShatteredReality").description("Chance to cause confusion on hit").valueType(ValueType.PERCENT).value(8.5f).build());
        attributes.add(Attribute.builder().name("AncientFocus").description("Boosts spell accuracy").valueType(ValueType.FLOATING).value(2.9f).build());
        attributes.add(Attribute.builder().name("Voidwalker").description("Improves resistance to space-time anomalies").valueType(ValueType.DECIMAL).value(16.0f).build());
        attributes.add(Attribute.builder().name("SpiritHarmony").description("Enhances synergy with summoned creatures").valueType(ValueType.PERCENT).value(10.5f).build());
    }

    public static synchronized TestDatasource getInstance() {
        if (instance == null)
            instance = new TestDatasource();

        return instance;
    }

    public void loadItems() {
        Random random = new Random();
        List<Item> weapons = new ArrayList<>();
        List<Armor> armors = new ArrayList<>();
        List<Jewelry> jewelleries = new ArrayList<>();
        List<Charm> charms = new ArrayList<>();
        List<Gem> gems = new ArrayList<>();
        List<Rune> runes = new ArrayList<>();
        List<Miscellaneous> miscellaneous = new ArrayList<>();
        List<Potion> potions = new ArrayList<>();
        List<Offhand> offhands = new ArrayList<>();

        weapons.add(Weapon.builder().name("Shadow Blade").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.SWORD).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Rune Axe").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.AXE).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Eagle Bow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.BOW).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("Iron Mace").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.MACE).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Venom Dagger").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.DAGGER).rarity(ItemRarity.CRAFTED).build());
        weapons.add(Weapon.builder().name("Steel Crossbow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.CROSSBOW).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Titan Spear").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.SPEAR).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Mystic Wand").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.WAND).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Tiger Claws").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.CLAWS).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Light Javelin").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.JAVELIN).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("Halberd of Doom").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.POLEARM).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Celestial Orb").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.ORB).rarity(ItemRarity.CRAFTED).build());
        weapons.add(Weapon.builder().name("Serpent Sword").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.SWORD).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Battle Axe").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.AXE).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Long Bow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.BOW).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("War Mace").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.MACE).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Assassin Dagger").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.DAGGER).rarity(ItemRarity.CRAFTED).build());
        weapons.add(Weapon.builder().name("Heavy Crossbow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.CROSSBOW).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Royal Spear").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.SPEAR).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Wizard Wand").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.WAND).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Beast Claws").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.CLAWS).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Storm Javelin").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.JAVELIN).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("Hell Polearm").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.POLEARM).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Void Orb").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.ORB).rarity(ItemRarity.CRAFTED).build());
        weapons.add(Weapon.builder().name("Fire Sword").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.SWORD).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Berserker Axe").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.AXE).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Hunter Bow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.BOW).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("Crushing Mace").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.MACE).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Silent Dagger").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.DAGGER).rarity(ItemRarity.CRAFTED).build());
        weapons.add(Weapon.builder().name("Repeating Crossbow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.CROSSBOW).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Divine Spear").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.SPEAR).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Elder Wand").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.WAND).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Razor Claws").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.CLAWS).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Thunder Javelin").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.JAVELIN).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("Demon Polearm").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.POLEARM).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Cosmic Orb").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.ORB).rarity(ItemRarity.CRAFTED).build());
        weapons.add(Weapon.builder().name("Ice Sword").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.SWORD).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Giant Axe").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.AXE).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Spirit Bow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.BOW).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("Bone Mace").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.MACE).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Quick Dagger").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.DAGGER).rarity(ItemRarity.CRAFTED).build());
        weapons.add(Weapon.builder().name("Precision Crossbow").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.CROSSBOW).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Ancient Spear").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.SPEAR).rarity(ItemRarity.MAGIC).build());
        weapons.add(Weapon.builder().name("Arcane Wand").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.WAND).rarity(ItemRarity.RARE).build());
        weapons.add(Weapon.builder().name("Steel Claws").level(random.nextInt(99) + 1).type(WeaponType.ONE_HANDED).category(WeaponCategory.CLAWS).rarity(ItemRarity.NORMAL).build());
        weapons.add(Weapon.builder().name("Wind Javelin").level(random.nextInt(99) + 1).type(WeaponType.RANGED).category(WeaponCategory.JAVELIN).rarity(ItemRarity.UNIQUE).build());
        weapons.add(Weapon.builder().name("Grave Polearm").level(random.nextInt(99) + 1).type(WeaponType.TWO_HANDED).category(WeaponCategory.POLEARM).rarity(ItemRarity.SET).build());
        weapons.add(Weapon.builder().name("Energy Orb").level(random.nextInt(99) + 1).type(WeaponType.CLASS_SPECIFIC).category(WeaponCategory.ORB).rarity(ItemRarity.CRAFTED).build());

        armors.add(Armor.builder().name("Steel Breastplate").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Battle Helmet").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Wooden Shield").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Leather Gloves").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Swift Boots").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("Enchanted Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Knight's Helm").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Tower Shield").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Combat Gloves").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Light Boots").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Dragon Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Magic Helmet").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("Round Shield").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Leather Gloves").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Boots of Silence").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Titanium Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Royal Helmet").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("Oval Shield").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Gloves of Power").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Boots of Speed").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Glowing Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Crowned Helm").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Shield of Faith").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("Gloves of Wisdom").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Boots of Flight").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Shadow Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Helm of Vision").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Shield of Protection").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Gloves of Fury").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("Boots of Haste").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Ice Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Helm of War").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Shield of Strength").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Gloves of Dexterity").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Boots of Evasion").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("Fire Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Helm of Wisdom").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Shield of Intellect").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Gloves of Life").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Boots of Mana").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Holy Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("King's Helm").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Shield of Light").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.MAGIC).build());
        armors.add(Armor.builder().name("Gloves of Darkness").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.RARE).build());
        armors.add(Armor.builder().name("Boots of Death").level(random.nextInt(99) + 1).type(ArmorType.BOOTS).rarity(ItemRarity.UNIQUE).build());
        armors.add(Armor.builder().name("Epic Armor").level(random.nextInt(99) + 1).type(ArmorType.BODY_ARMOR).rarity(ItemRarity.NORMAL).build());
        armors.add(Armor.builder().name("Hero's Helm").level(random.nextInt(99) + 1).type(ArmorType.HELMET).rarity(ItemRarity.CRAFTED).build());
        armors.add(Armor.builder().name("Shield of Legend").level(random.nextInt(99) + 1).type(ArmorType.SHIELD).rarity(ItemRarity.SET).build());
        armors.add(Armor.builder().name("Gloves of Destiny").level(random.nextInt(99) + 1).type(ArmorType.GLOVES).rarity(ItemRarity.MAGIC).build());

        jewelleries.add(Jewelry.builder().name("Ring of Power").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Life").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Speed").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Mana").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.NORMAL).build());
        jewelleries.add(Jewelry.builder().name("Ring of Dexterity").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.CRAFTED).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Intelligence").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.SET).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Critical Strike").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Magic Power").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Ring of Defense").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.NORMAL).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Attack Speed").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Strength and Health").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.SET).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Mana and Intelligence").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.CRAFTED).build());
        jewelleries.add(Jewelry.builder().name("Ring of Critical Strike and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Magic Power and Defense").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Attack Speed and Strength").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Health and Mana").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.NORMAL).build());
        jewelleries.add(Jewelry.builder().name("Ring of Intelligence and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.CRAFTED).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Defense and Critical Strike").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.SET).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Magic Power and Attack Speed").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Strength and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Ring of Health and Mana").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Intelligence and Critical Strike").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.NORMAL).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Defense and Magic Power").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.CRAFTED).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Attack Speed and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.SET).build());
        jewelleries.add(Jewelry.builder().name("Ring of Strength and Intelligence").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Health and Defense").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Mana and Critical Strike").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Magic Power and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.NORMAL).build());
        jewelleries.add(Jewelry.builder().name("Ring of Attack Speed and Intelligence").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.CRAFTED).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Strength and Mana").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.SET).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Health and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Intelligence and Defense").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Ring of Critical Strike and Magic Power").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Attack Speed and Health").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.NORMAL).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Strength and Defense").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.CRAFTED).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Mana and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.SET).build());
        jewelleries.add(Jewelry.builder().name("Ring of Intelligence and Magic Power").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Critical Strike and Attack Speed").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Health and Intelligence").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Dexterity and Defense").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.NORMAL).build());
        jewelleries.add(Jewelry.builder().name("Ring of Strength and Critical Strike").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.CRAFTED).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Mana and Magic Power").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.SET).build());
        jewelleries.add(Jewelry.builder().name("Bracelet of Attack Speed and Intelligence").level(random.nextInt(99) + 1).type(JewelryType.BRACELET).rarity(ItemRarity.MAGIC).build());
        jewelleries.add(Jewelry.builder().name("Necklace of Health and Dexterity").level(random.nextInt(99) + 1).type(JewelryType.NECKLACE).rarity(ItemRarity.RARE).build());
        jewelleries.add(Jewelry.builder().name("Ring of Defense and Mana").level(random.nextInt(99) + 1).type(JewelryType.RING).rarity(ItemRarity.UNIQUE).build());
        jewelleries.add(Jewelry.builder().name("Amulet of Dexterity and Magic Power").level(random.nextInt(99) + 1).type(JewelryType.AMULET).rarity(ItemRarity.NORMAL).build());

        charms.add(Charm.builder().name("Small Charm of Power").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Life").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Speed").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Mana").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Dexterity").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Intelligence").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Critical Strike").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Magic Power").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Defense").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Attack Speed").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Strength and Health").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Mana and Intelligence").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Critical Strike and Dexterity").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Magic Power and Defense").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Attack Speed and Strength").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Health and Mana").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Intelligence and Dexterity").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Defense and Critical Strike").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Magic Power and Attack Speed").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Strength and Dexterity").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Health and Mana").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Intelligence and Critical Strike").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Defense and Magic Power").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Attack Speed and Dexterity").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Strength and Intelligence").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Health and Defense").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Mana and Critical Strike").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Magic Power and Dexterity").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Attack Speed and Intelligence").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Health and Dexterity").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Critical Strike and Magic Power").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Attack Speed and Health").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Strength and Defense").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Mana and Dexterity").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Intelligence and Magic Power").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Critical Strike and Attack Speed").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Health and Intelligence").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Dexterity and Defense").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Strength and Critical Strike").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Mana and Magic Power").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Attack Speed and Intelligence").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Health and Dexterity").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Defense and Mana").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Dexterity and Magic Power").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Intelligence and Magic Power").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Attack Speed and Health").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Strength and Defense").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());
        charms.add(Charm.builder().name("Grand Charm of Mana and Dexterity").level(random.nextInt(99) + 1).type(CharmType.GRAND).build());
        charms.add(Charm.builder().name("Small Charm of Intelligence and Magic Power").level(random.nextInt(99) + 1).type(CharmType.SMALL).build());
        charms.add(Charm.builder().name("Large Charm of Critical Strike and Attack Speed").level(random.nextInt(99) + 1).type(CharmType.LARGE).build());

        gems.add(Gem.builder().name("Chipped Amethyst").level(random.nextInt(99) + 1).type(GemType.AMETHYST).quality(GemQuality.CHIPPED).build());
        gems.add(Gem.builder().name("Flawed Diamond").level(random.nextInt(99) + 1).type(GemType.DIAMOND).quality(GemQuality.FLAWED).build());
        gems.add(Gem.builder().name("Regular Emerald").level(random.nextInt(99) + 1).type(GemType.EMERALD).quality(GemQuality.REGULAR).build());
        gems.add(Gem.builder().name("Flawless Ruby").level(random.nextInt(99) + 1).type(GemType.RUBY).quality(GemQuality.FLAWLESS).build());
        gems.add(Gem.builder().name("Perfect Sapphire").level(random.nextInt(99) + 1).type(GemType.SAPPHIRE).quality(GemQuality.PERFECT).build());
        gems.add(Gem.builder().name("Chipped Topaz").level(random.nextInt(99) + 1).type(GemType.TOPAZ).quality(GemQuality.CHIPPED).build());
        gems.add(Gem.builder().name("Flawed Skull").level(random.nextInt(99) + 1).type(GemType.SKULL).quality(GemQuality.FLAWED).build());
        gems.add(Gem.builder().name("Regular Amethyst").level(random.nextInt(99) + 1).type(GemType.AMETHYST).quality(GemQuality.REGULAR).build());
        gems.add(Gem.builder().name("Flawless Diamond").level(random.nextInt(99) + 1).type(GemType.DIAMOND).quality(GemQuality.FLAWLESS).build());
        gems.add(Gem.builder().name("Perfect Emerald").level(random.nextInt(99) + 1).type(GemType.EMERALD).quality(GemQuality.PERFECT).build());
        gems.add(Gem.builder().name("Chipped Ruby").level(random.nextInt(99) + 1).type(GemType.RUBY).quality(GemQuality.CHIPPED).build());
        gems.add(Gem.builder().name("Flawed Sapphire").level(random.nextInt(99) + 1).type(GemType.SAPPHIRE).quality(GemQuality.FLAWED).build());
        gems.add(Gem.builder().name("Regular Topaz").level(random.nextInt(99) + 1).type(GemType.TOPAZ).quality(GemQuality.REGULAR).build());
        gems.add(Gem.builder().name("Flawless Skull").level(random.nextInt(99) + 1).type(GemType.SKULL).quality(GemQuality.FLAWLESS).build());
        gems.add(Gem.builder().name("Perfect Amethyst").level(random.nextInt(99) + 1).type(GemType.AMETHYST).quality(GemQuality.PERFECT).build());
        gems.add(Gem.builder().name("Chipped Diamond").level(random.nextInt(99) + 1).type(GemType.DIAMOND).quality(GemQuality.CHIPPED).build());
        gems.add(Gem.builder().name("Flawed Emerald").level(random.nextInt(99) + 1).type(GemType.EMERALD).quality(GemQuality.FLAWED).build());
        gems.add(Gem.builder().name("Regular Ruby").level(random.nextInt(99) + 1).type(GemType.RUBY).quality(GemQuality.REGULAR).build());
        gems.add(Gem.builder().name("Flawless Sapphire").level(random.nextInt(99) + 1).type(GemType.SAPPHIRE).quality(GemQuality.FLAWLESS).build());
        gems.add(Gem.builder().name("Perfect Topaz").level(random.nextInt(99) + 1).type(GemType.TOPAZ).quality(GemQuality.PERFECT).build());
        gems.add(Gem.builder().name("Chipped Skull").level(random.nextInt(99) + 1).type(GemType.SKULL).quality(GemQuality.CHIPPED).build());
        gems.add(Gem.builder().name("Flawed Amethyst").level(random.nextInt(99) + 1).type(GemType.AMETHYST).quality(GemQuality.FLAWED).build());
        gems.add(Gem.builder().name("Regular Diamond").level(random.nextInt(99) + 1).type(GemType.DIAMOND).quality(GemQuality.REGULAR).build());
        gems.add(Gem.builder().name("Flawless Emerald").level(random.nextInt(99) + 1).type(GemType.EMERALD).quality(GemQuality.FLAWLESS).build());
        gems.add(Gem.builder().name("Perfect Ruby").level(random.nextInt(99) + 1).type(GemType.RUBY).quality(GemQuality.PERFECT).build());
        gems.add(Gem.builder().name("Chipped Sapphire").level(random.nextInt(99) + 1).type(GemType.SAPPHIRE).quality(GemQuality.CHIPPED).build());
        gems.add(Gem.builder().name("Flawed Topaz").level(random.nextInt(99) + 1).type(GemType.TOPAZ).quality(GemQuality.FLAWED).build());
        gems.add(Gem.builder().name("Regular Skull").level(random.nextInt(99) + 1).type(GemType.SKULL).quality(GemQuality.REGULAR).build());
        gems.add(Gem.builder().name("Flawless Amethyst").level(random.nextInt(99) + 1).type(GemType.AMETHYST).quality(GemQuality.FLAWLESS).build());
        gems.add(Gem.builder().name("Perfect Diamond").level(random.nextInt(99) + 1).type(GemType.DIAMOND).quality(GemQuality.PERFECT).build());
        gems.add(Gem.builder().name("Chipped Emerald").level(random.nextInt(99) + 1).type(GemType.EMERALD).quality(GemQuality.CHIPPED).build());
        gems.add(Gem.builder().name("Flawed Ruby").level(random.nextInt(99) + 1).type(GemType.RUBY).quality(GemQuality.FLAWED).build());
        gems.add(Gem.builder().name("Regular Sapphire").level(random.nextInt(99) + 1).type(GemType.SAPPHIRE).quality(GemQuality.REGULAR).build());
        gems.add(Gem.builder().name("Flawless Topaz").level(random.nextInt(99) + 1).type(GemType.TOPAZ).quality(GemQuality.FLAWLESS).build());
        gems.add(Gem.builder().name("Perfect Skull").level(random.nextInt(99) + 1).type(GemType.SKULL).quality(GemQuality.PERFECT).build());
        gems.add(Gem.builder().name("Flawed Sapphire").level(random.nextInt(99) + 1).type(GemType.SAPPHIRE).quality(GemQuality.FLAWED).build());

        runes.add(Rune.builder().name("Low Rune of Power").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Life").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Speed").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Mana").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Dexterity").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Intelligence").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Critical Strike").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Magic Power").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Defense").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Attack Speed").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Strength and Health").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Mana and Intelligence").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Critical Strike and Dexterity").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Magic Power and Defense").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Attack Speed and Strength").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Health and Mana").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Intelligence and Dexterity").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Defense and Critical Strike").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Magic Power and Attack Speed").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Strength and Dexterity").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Health and Mana").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Intelligence and Critical Strike").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Defense and Magic Power").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Attack Speed and Dexterity").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Strength and Intelligence").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Health and Defense").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Mana and Critical Strike").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Magic Power and Dexterity").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Attack Speed and Intelligence").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Health and Dexterity").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Critical Strike and Magic Power").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Attack Speed and Health").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Strength and Defense").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Mana and Dexterity").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Intelligence and Magic Power").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Critical Strike and Attack Speed").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Health and Intelligence").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Dexterity and Defense").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Strength and Critical Strike").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Mana and Magic Power").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Attack Speed and Intelligence").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Health and Dexterity").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Defense and Mana").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Dexterity and Magic Power").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Intelligence and Magic Power").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Attack Speed and Health").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Strength and Defense").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());
        runes.add(Rune.builder().name("High Rune of Mana and Dexterity").level(random.nextInt(99) + 1).type(RuneType.HIGH).build());
        runes.add(Rune.builder().name("Low Rune of Intelligence and Magic Power").level(random.nextInt(99) + 1).type(RuneType.LOW).build());
        runes.add(Rune.builder().name("Medium Rune of Critical Strike and Attack Speed").level(random.nextInt(99) + 1).type(RuneType.MEDIUM).build());

        miscellaneous.add(Miscellaneous.builder().name("Identify Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Town Portal Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Identify Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Town Portal Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Scroll of Knowledge").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Scroll of Return").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Tome of Wisdom").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Tome of Gateway").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Dungeon Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Magic Identify Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Quick Return Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Advanced Identify Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Fast Travel Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Ancient Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Simple Identify Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Basic Town Portal Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Beginner Identify Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Entry Town Portal Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Rusty Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Detailed Identify Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Instant Town Portal Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Expert Identify Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Portal Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Golden Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Identification Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("City Portal Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Book of Identification").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Book of City Travel").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Silver Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Inspect Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Teleport Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Analysis Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Teleport Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Skeleton Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Examine Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Return Scroll").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Item Analysis Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Fast Return Tome").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Crypt Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Scroll of Inspection").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Scroll of Teleportation").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Tome of Item Analysis").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Tome of Rapid Return").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Vault Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());
        miscellaneous.add(Miscellaneous.builder().name("Scroll of Appraisal").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.IDENTIFY_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Scroll of Town Travel").level(random.nextInt(99) + 1).type(MiscType.SCROLL).subType(MiscSubType.TOWN_PORTAL_SCROLL).build());
        miscellaneous.add(Miscellaneous.builder().name("Tome of Item Appraisal").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.IDENTIFY_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Tome of Quick Travel").level(random.nextInt(99) + 1).type(MiscType.TOME).subType(MiscSubType.TOWN_PORTAL_TOME).build());
        miscellaneous.add(Miscellaneous.builder().name("Treasure Key").level(random.nextInt(99) + 1).type(MiscType.KEY).subType(MiscSubType.KEY).build());

        potions.add(Potion.builder().name("Small Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(200) + 50).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(300) + 100).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(500) + 200).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(400) + 150).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(350) + 120).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(600) + 250).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(250) + 80).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(450) + 180).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(500) + 200).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(200) + 50).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(350) + 120).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(600) + 250).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(250) + 80).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(450) + 180).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(500) + 200).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(200) + 50).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(300) + 100).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(350) + 120).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(400) + 150).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(600) + 250).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(250) + 80).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(450) + 180).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(500) + 200).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(200) + 50).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(300) + 100).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(350) + 120).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(400) + 150).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(600) + 250).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(250) + 80).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(450) + 180).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(500) + 200).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(200) + 50).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(300) + 100).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(350) + 120).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(400) + 150).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(250) + 80).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(450) + 180).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(500) + 200).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(200) + 50).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(300) + 100).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(350) + 120).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(400) + 150).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(600) + 250).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(250) + 80).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Healing Potion").level(random.nextInt(99) + 1).type(PotionType.HEALING).restoreValue(random.nextInt(450) + 180).size(PotionSize.LARGE).build());
        potions.add(Potion.builder().name("Small Mana Potion").level(random.nextInt(99) + 1).type(PotionType.MANA).restoreValue(random.nextInt(500) + 200).size(PotionSize.SMALL).build());
        potions.add(Potion.builder().name("Medium Rejuvenation Potion").level(random.nextInt(99) + 1).type(PotionType.REJUVENATION).restoreValue(random.nextInt(200) + 50).size(PotionSize.MEDIUM).build());
        potions.add(Potion.builder().name("Large Special Potion").level(random.nextInt(99) + 1).type(PotionType.SPECIAL).restoreValue(random.nextInt(300) + 100).size(PotionSize.LARGE).build());

        offhands.add(Offhand.builder().name("Wooden Buckler").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Orb").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Tome").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Shield").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Catalyst").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Focus").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Book").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Shield").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Globe").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Orb").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Grimoire").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Buckler").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Focus").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Tome").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Shield").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Catalyst").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Book").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Globe").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Orb").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Grimoire").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Focus").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Tome").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Shield").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Book").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Catalyst").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Globe").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Orb").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Grimoire").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Buckler").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Tome").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Shield").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Focus").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Book").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Globe").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Orb").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Grimoire").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Buckler").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Catalyst").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Tome").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Shield").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Focus").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Orb").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Globe").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Book").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());
        offhands.add(Offhand.builder().name("Rare Grimoire").level(random.nextInt(99) + 1).rarity(ItemRarity.RARE).build());
        offhands.add(Offhand.builder().name("Set Buckler").level(random.nextInt(99) + 1).rarity(ItemRarity.SET).build());
        offhands.add(Offhand.builder().name("Unique Tome").level(random.nextInt(99) + 1).rarity(ItemRarity.UNIQUE).build());
        offhands.add(Offhand.builder().name("Crafted Shield").level(random.nextInt(99) + 1).rarity(ItemRarity.CRAFTED).build());
        offhands.add(Offhand.builder().name("Normal Catalyst").level(random.nextInt(99) + 1).rarity(ItemRarity.NORMAL).build());
        offhands.add(Offhand.builder().name("Magic Orb").level(random.nextInt(99) + 1).rarity(ItemRarity.MAGIC).build());

        items.addAll(weapons);
        items.addAll(armors);
        items.addAll(jewelleries);
        items.addAll(charms);
        items.addAll(gems);
        items.addAll(runes);
        items.addAll(miscellaneous);
        items.addAll(potions);
        items.addAll(offhands);
    }



    public void loadHeroes() {
        //heroes.add(Hero.builder().)
    }

    private void loadEquipments() {

    }
}
